<?php

namespace App\Domains\{{domainCaps}}\Businesses;

use App\Domains\{{domainCaps}}\Repositories\{{domainCaps}}AddRepository;
use Mockery;
use PHPUnit\Framework\TestCase;

class {{domainCaps}}AddBusinessTest extends TestCase
{
    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}AddBusiness::__construct
     */
    public function testCreateBusiness()
    {
        ${{domain}}AddRepositoryMock = Mockery::mock(
            {{domainCaps}}AddRepository::class
        )->shouldReceive('getTable')
            ->once()
            ->andReturn('test')
            ->shouldReceive('setTable')
            ->with('test_test')
            ->once()
            ->andReturn(true)
            ->getMock();

        $config = app()->make('config');
        $config->set('app.db_suffix', '_test');

        ${{domain}}AddBusiness = new {{domainCaps}}AddBusiness(
            ${{domain}}AddRepositoryMock
        );

        $this->assertInstanceOf(
            {{domainCaps}}AddBusiness::class,
            ${{domain}}AddBusiness
        );
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}AddBusiness::process
     */
    public function testProcess()
    {
        $id = '01E4E7RTJ3C11B6Z0H0QTJCW04';
        
        $data = [
            'field' => 'test',
        ];

        ${{domain}}AddRepositoryMock = Mockery::mock(
            {{domainCaps}}AddRepository::class
        )->shouldReceive('insert')
            ->with($data)
            ->once()
            ->andReturn($id)
            ->shouldReceive('getById')
            ->with($id)
            ->once()
            ->andReturn($data)
            ->shouldReceive('getTable')
            ->once()
            ->andReturn('test')
            ->shouldReceive('setTable')
            ->with('test_test')
            ->once()
            ->andReturn(true)
            ->getMock();

        $config = app()->make('config');
        $config->set('app.db_suffix', '_test');

        ${{domain}}AddBusiness = new {{domainCaps}}AddBusiness(
            ${{domain}}AddRepositoryMock
        );

        $process = ${{domain}}AddBusiness->process($data);

        $this->assertEquals($data, $process);
    }

    protected function tearDown(): void
    {
        Mockery::close();
    }
}
