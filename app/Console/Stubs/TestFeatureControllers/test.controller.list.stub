<?php

namespace Tests\Feature\Domains\{{domainCaps}};

use DatabaseCache\Repository;
use Laravel\Lumen\Testing\DatabaseMigrations;
use Mockery;
use Tests\Feature\TestCaseFeature;

class {{domainCaps}}ListControllerTest extends TestCaseFeature
{
    use DatabaseMigrations;

    protected function setUp(): void
    {
        parent::setUp();
        $this->artisan('db:seed', ['--class' => '{{domainCaps}}']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}ListController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}ListController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}ListBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}ListBusiness::process
     */
    public function testList()
    {
        $repositoryeMock = Mockery::mock('overload:' . Repository::class);
        $repositoryeMock->shouldReceive('generateIdentifierByArray')
            ->once()
            ->andReturn('test')
            ->shouldReceive('getQuery')
            ->once()
            ->andReturn(null)
            ->shouldReceive('setQuery')
            ->once()
            ->andReturn(true);

        $this->json('GET', '/{{domainOriginal}}/list', [], $this->header);

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(200, $this->response->getStatusCode());
        $this->assertArrayHasKey(0, $response['data']['data']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}ListController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}ListController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}ListBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}ListBusiness::process
     */
    public function testListWithCache()
    {
        $result = [
            'data' => [
                [
                    'field' => 'test',
                ],
            ],
        ];
        $repositoryeMock = Mockery::mock('overload:' . Repository::class);
        $repositoryeMock->shouldReceive('generateIdentifierByArray')
            ->once()
            ->andReturn('test')
            ->shouldReceive('getQuery')
            ->once()
            ->andReturn(json_encode($result))
            ->shouldReceive('setQuery')
            ->never()
            ->andReturn(true);

        $this->json('GET', '/{{domainOriginal}}/list', [], $this->header);

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(200, $this->response->getStatusCode());
        $this->assertArrayHasKey(0, $response['data']['data']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}ListController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}ListController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}ListBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}ListBusiness::process
     */
    public function testListAndNotMakeCache()
    {
        $repositoryeMock = Mockery::mock('overload:' . Repository::class);
        $repositoryeMock->shouldReceive('generateIdentifierByArray')
            ->once()
            ->andReturn('test')
            ->shouldReceive('getQuery')
            ->once()
            ->andReturn(null)
            ->shouldReceive('setQuery')
            ->never()
            ->andReturn(true);

        $this->json('GET', '/{{domainOriginal}}/list?page=2', [], $this->header);

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(200, $this->response->getStatusCode());
        $this->assertArrayNotHasKey(0, $response['data']['data']);
    }
}
