<?php

namespace Tests\Feature\Domains\{{domainCaps}};

use DatabaseCache\Repository;
use Laravel\Lumen\Testing\DatabaseMigrations;
use Mockery;
use Tests\Feature\TestCaseFeature;

class {{domainCaps}}DeleteControllerTest extends TestCaseFeature
{
    use DatabaseMigrations;

    protected function setUp(): void
    {
        parent::setUp();
        $this->artisan('db:seed', ['--class' => '{{domainCaps}}']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}DeleteController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}DeleteController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeleteBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeleteBusiness::process
     */
    public function testDelete()
    {
        $repositoryeMock = Mockery::mock('overload:' . Repository::class);
        $repositoryeMock->shouldReceive('getQuery')
            ->andReturn(null)
            ->shouldReceive('setQuery')
            ->andReturn(true)
            ->shouldReceive('delQuery')
            ->andReturn(true);

        $this->delete('/{{domainOriginal}}/delete/' . $this->id, [], $this->header);

        $this->assertEquals(204, $this->response->getStatusCode());
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}DeleteController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}DeleteController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeleteBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}DeleteBusiness::process
     */
    public function testDeleteAndNotFound()
    {
        $repositoryeMock = Mockery::mock('overload:' . Repository::class);
        $repositoryeMock->shouldReceive('getQuery')
            ->andReturn(null)
            ->shouldReceive('setQuery')
            ->andReturn(true)
            ->shouldReceive('delQuery')
            ->never()
            ->andReturn(true);

        $this->json('DELETE', '/{{domainOriginal}}/delete/01E492KQX6BW62YEA45SGWRXYQ', [], $this->header);

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(404, $this->response->getStatusCode());
        $this->assertEquals('Data not found', $response['message']);
    }
}
