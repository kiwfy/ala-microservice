<?php

namespace Tests\Feature\Domains\{{domainCaps}};

use DatabaseCache\Repository;
use Laravel\Lumen\Testing\DatabaseMigrations;
use Mockery;
use Tests\Feature\TestCaseFeature;

class {{domainCaps}}BulkControllerTest extends TestCaseFeature
{
    use DatabaseMigrations;

    protected function setUp(): void
    {
        parent::setUp();
        $this->artisan('db:seed', ['--class' => '{{domainCaps}}']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}BulkController::__construct
     */
    public function testRequiredFields()
    {
        $this->json('POST', '/{{domainOriginal}}/bulk', [], $this->header);

        $response = [
            'message' => 'A validation error occurrs',
            'data' => [
                'ids' => [
                    'The ids field is required.'
                ],
            ]
        ];

        $result = json_decode($this->response->getContent(), true);

        $this->assertEquals(422, $this->response->getStatusCode());
        $this->assertEquals('A validation error occurrs', $result['message']);
        $this->assertEquals($response['data']['ids'], $result['data']['ids']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}BulkController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}BulkController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}BulkBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}BulkBusiness::process
     */
    public function testBulk()
    {
        $repositoryeMock = Mockery::mock('overload:' . Repository::class);
        $repositoryeMock->shouldReceive('generateIdentifierByArray')
            ->once()
            ->andReturn('test')
            ->shouldReceive('getQuery')
            ->once()
            ->andReturn(null)
            ->shouldReceive('setQuery')
            ->once()
            ->andReturn(true);

        $ids = [
            $this->id,
        ];

        $this->json('POST', '/{{domainOriginal}}/bulk', ['ids' => $ids], $this->header);

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(200, $this->response->getStatusCode());
        $this->assertArrayHasKey(0, $response['data']['data']);
        $this->assertEquals($this->id, $response['data']['data'][0]['id']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}BulkController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}BulkController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}BulkBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}BulkBusiness::process
     */
    public function testBulkWithCache()
    {
        $response = [
            'data' => [
                [
                    'id' => '01EH2AZRMHDCRKNEAZ4GZ3F8A0',
                    'field' => '52pcohKvfh',
                    'created' => '2020-08-31 13:29:53',
                    'modified' => '2020-08-31 13:29:53',
                    'deleted' => null,
                ],
            ],
        ];

        $repositoryeMock = Mockery::mock('overload:' . Repository::class);
        $repositoryeMock->shouldReceive('generateIdentifierByArray')
            ->once()
            ->andReturn('test')
            ->shouldReceive('getQuery')
            ->once()
            ->andReturn(json_encode($response))
            ->shouldReceive('setQuery')
            ->never()
            ->andReturn(true);

        $ids = [
            $this->id,
        ];

        $this->json('POST', '/{{domainOriginal}}/bulk', ['ids' => $ids], $this->header);

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(200, $this->response->getStatusCode());
        $this->assertArrayHasKey(0, $response['data']['data']);
        $this->assertEquals($this->id, $response['data']['data'][0]['id']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}BulkController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}BulkController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}BulkBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}BulkBusiness::process
     */
    public function testBulkEmptyAndNotMakeCache()
    {
        $repositoryeMock = Mockery::mock('overload:' . Repository::class);
        $repositoryeMock->shouldReceive('generateIdentifierByArray')
            ->once()
            ->andReturn('test')
            ->shouldReceive('getQuery')
            ->once()
            ->andReturn(null)
            ->shouldReceive('setQuery')
            ->never()
            ->andReturn(true);

        $ids = [
            '01EH2CBM90QRATXDQA3ZKTRT4M',
        ];

        $this->json('POST', '/{{domainOriginal}}/bulk', ['ids' => $ids], $this->header);

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(200, $this->response->getStatusCode());
        $this->assertArrayNotHasKey(0, $response['data']['data']);
    }
}
