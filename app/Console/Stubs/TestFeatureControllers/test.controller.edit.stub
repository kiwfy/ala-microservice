<?php

namespace Tests\Feature\Domains\{{domainCaps}};

use DatabaseCache\Repository;
use Laravel\Lumen\Testing\DatabaseMigrations;
use Mockery;
use Tests\Feature\TestCaseFeature;

class {{domainCaps}}EditControllerTest extends TestCaseFeature
{
    use DatabaseMigrations;

    protected function setUp(): void
    {
        parent::setUp();
        $this->artisan('db:seed', ['--class' => '{{domainCaps}}']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}EditController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}EditController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}EditBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}EditBusiness::process
     */
    public function testEdit{{domainCaps}}()
    {
        $repositoryeMock = Mockery::mock('overload:' . Repository::class);
        $repositoryeMock->shouldReceive('getQuery')
            ->andReturn(null)
            ->shouldReceive('setQuery')
            ->andReturn(true)
            ->shouldReceive('delQuery')
            ->andReturn(true);

        $this->json(
            'PATCH',
            '/{{domainOriginal}}/edit/' . $this->id,
            ['field' => 'test 2'],
            $this->header
        );

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(200, $this->response->getStatusCode());
        $this->assertEquals('test 2', $response['data']['field']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}EditController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}EditController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}EditBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}EditBusiness::process
     */
    public function testEdit{{domainCaps}}NotFound()
    {
        $repositoryeMock = Mockery::mock('overload:' . Repository::class);
        $repositoryeMock->shouldReceive('getQuery')
            ->andReturn(null)
            ->shouldReceive('setQuery')
            ->andReturn(true)
            ->shouldReceive('delQuery')
            ->never()
            ->andReturn(true);

        $this->json(
            'PATCH',
            '/{{domainOriginal}}/edit/01E492KQX6BW62YEA45SGWRXYQ',
            ['field' => 'test 2'],
            $this->header
        );

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(404, $this->response->getStatusCode());
        $this->assertEquals('Data not found', $response['message']);
    }
}
