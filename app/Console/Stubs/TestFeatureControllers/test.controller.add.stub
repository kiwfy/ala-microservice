<?php

namespace Tests\Feature\Domains\{{domainCaps}};

use DatabaseCache\Repository;
use Laravel\Lumen\Testing\DatabaseMigrations;
use Mockery;
use Tests\Feature\TestCaseFeature;
use Illuminate\Support\Facades\Config;

class {{domainCaps}}AddControllerTest extends TestCaseFeature
{
    use DatabaseMigrations;

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}AddController::__construct
     */
    public function testRequiredFields()
    {
        $this->json('POST', '/{{domainOriginal}}/add', [], $this->header);

        $response = [
            'message' => 'A validation error occurrs',
            'data' => [
                'field' => [
                    'The field field is required.'
                ],
            ]
        ];

        $result = json_decode($this->response->getContent(), true);

        $this->assertEquals(422, $this->response->getStatusCode());
        $this->assertArrayHasKey('message', $result);
        $this->assertEquals('A validation error occurrs', $result['message']);

        $fields = [
            'field',
        ];
        foreach ($fields as $field) {
            $this->assertEquals($response['data'][$field], $result['data'][$field]);
        }
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}AddController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}AddController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}AddBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}AddBusiness::process
     * @covers \App\Repositories\BaseRepository::__construct
     * @covers \App\Repositories\BaseRepository::insert
     * @covers \App\Repositories\BaseRepository::getById
     */
    public function testAdd{{domainCaps}}()
    {
        $data = [
            'field' => 'test',
        ];

        $repositoryeMock = Mockery::mock('overload:' . Repository::class);
        $repositoryeMock->shouldReceive('getQuery')
            ->once()
            ->andReturn(null)
            ->shouldReceive('setQuery')
            ->once()
            ->andReturn(true);

        $this->call('options', '/{{domainOriginal}}/add', [], $this->header);
        $this->json('POST', '/{{domainOriginal}}/add', $data, $this->header);

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(201, $this->response->getStatusCode());
        $this->assertEquals($data['field'], $response['data']['field']);
    }

    /**
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}AddController::__construct
     * @covers \App\Domains\{{domainCaps}}\Http\Controllers\{{domainCaps}}AddController::process
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}AddBusiness::__construct
     * @covers \App\Domains\{{domainCaps}}\Businesses\{{domainCaps}}AddBusiness::process
     * @covers \App\Repositories\BaseRepository::__construct
     * @covers \App\Repositories\BaseRepository::insert
     * @covers \App\Repositories\BaseRepository::getById
     */
    public function testAdd{{domainCaps}}WithCache()
    {
        $data = [
            'field' => 'test',
        ];

        $repositoryeMock = Mockery::mock('overload:' . Repository::class);
        $repositoryeMock->shouldReceive('getQuery')
            ->once()
            ->andReturn(json_encode($data))
            ->shouldReceive('setQuery')
            ->never()
            ->andReturn(true);

        $this->call('options', '/{{domainOriginal}}/add', [], $this->header);
        $this->json('POST', '/{{domainOriginal}}/add', $data, $this->header);

        $response = json_decode($this->response->getContent(), true);

        $this->assertEquals(201, $this->response->getStatusCode());
        $this->assertEquals($data['field'], $response['data']['field']);
    }
}
